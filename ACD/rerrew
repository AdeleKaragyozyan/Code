using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Worker worker1 = new Worker("Joe", 2000);
            Worker worker2 = new Worker("Marie", 3000);
            Worker worker3 = new Worker("George", 1500);
            Worker worker4 = new Worker("Kyle", 4500);
            Worker worker5 = new Worker("Amy", 1000);
            Worker[] Office = new Worker[] { worker1, worker2, worker3, worker4, worker5 };
            MergeSort(Office);
            foreach (var worker in Office)
                Console.WriteLine(worker.ToString());
        }
        public static void MergeSort(Worker[] array)
        {
            MergeSortRecursive(array, 0, array.Length - 1);
        }
        private static void MergeSortRecursive(Worker[] array, int left, int right)
        {
        if (left < right)
            {
                int mid = left + (right - left)/2;
                MergeSortRecursive(array, left, mid);
                MergeSortRecursive(array, mid + 1, right);
                Merge(array, left, mid, right);
            }
        }
        private static void Merge(Worker[] array, int left,int mid, int right)
        {
            int leftSize = mid - left + 1, rightSize = right - mid;
            Worker[] leftArr = new Worker[leftSize], rightArr = new Worker[rightSize];

            Array.Copy(array, left, leftArr, 0, leftSize);
            Array.Copy(array, mid+1, rightArr, 0, rightSize);

            int i = 0, j = 0, k = left;
            while (i < leftSize && j < rightSize)
                array[k++] = (leftArr[i].Salary <= rightArr[j].Salary) ? leftArr[i++] : rightArr[j++];
            while (i < leftSize) array[k++] = leftArr[i++];
            while (j < rightSize) array[k++] = rightArr[j++];
        }
    }
}
